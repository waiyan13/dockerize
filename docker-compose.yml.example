networks:
  nw:
    driver: bridge
    ipam:
      driver: default
      config: 
        - subnet: 172.24.0.0/16
          gateway: 172.24.0.1

services:
  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
        - TZ=${TZ}
    container_name: ${COMPOSE_PROJECT_NAME}_postgres_${POSTGRES_VERSION}
    hostname: postgres
    environment:
      - PGPORT=${POSTGRES_PORT}
      - PGTZ=UTC
      - POSTGRES_PASSWORD=${POSTGRES_ROOT_PASSWORD}
    image: ${COMPOSE_PROJECT_NAME}_postgres_${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - nw

  nginx:
    build:
      context: ./nginx
      args:
        - NGINX_VERSION=${NGINX_VERSION}
        - TZ=${TZ}
    container_name: ${COMPOSE_PROJECT_NAME}_nginx_${NGINX_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_nginx_${NGINX_VERSION}
    ports:
      - "${NGINX_HTTP}:80"
      - "${NGINX_HTTPS}:443"
    volumes:
      - ${DATA_PATH_HOST}/nginx:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    networks:
      - nw

  node:
    build:
      context: ./node
      args:
        - INSTALL_VERSION=${NODE_VERSION}
        - TZ=${TZ}
    container_name: ${COMPOSE_PROJECT_NAME}_node_${NODE_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_node_${NODE_VERSION}
    volumes:
      - ${UI_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    ports:
      - "${NODE_PORT}:${NODE_PORT}"
    networks:
      - nw
    tty: true

  python:
    build:
      context: ./python
      args:
        - INSTALL_VERSION=${PYTHON_VERSION}
        - INSTALL_PIPENV=${PYTHON_INSTALL_PIPENV}
        - INSTALL_POETRY=${PYTHON_INSTALL_POETRY}
        - REF_VERSION=${PYTHON_REF_VERSION}
        - TZ=${TZ}
    container_name: ${COMPOSE_PROJECT_NAME}_python_${PYTHON_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_python_${PYTHON_VERSION}
    volumes:
      - ${API_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    ports:
      - "${PYTHON_PORT}:${PYTHON_PORT}"
    networks:
      - nw
    tty: true

  rust:
    build:
      context: ./rust
      args:
        - RUST_VERSION=${RUST_VERSION}
        - TZ=${TZ}
        - RUST_PORT=${RUST_PORT}
    container_name: ${COMPOSE_PROJECT_NAME}_rust_${RUST_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_rust_${RUST_VERSION}
    volumes:
      - ${API_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    ports:
      - "${RUST_PORT}:${RUST_PORT}"
    networks:
      - nw
    tty: true

  go:
    build:
      context: ./go
      args:
        - GO_VERSION=${GO_VERSION}
        - TZ=${TZ}
        - GO_PORT=${GO_PORT}
    container_name: ${COMPOSE_PROJECT_NAME}_go_${GO_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_go_${GO_VERSION}
    volumes:
      - ${API_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    ports:
      - "${GO_PORT}:${GO_PORT}"
    networks:
      - nw
    tty: true

  keycloak:
    build:
      context: ./keycloak
      args:
        - KEYCLOAK_VERSION=${KEYCLOAK_VERSION}
        - KEYCLOAK_DATABASE=${KEYCLOAK_DATABASE}
    container_name: ${COMPOSE_PROJECT_NAME}_keycloak_${KEYCLOAK_VERSION}
    environment:
      - KC_DB=${KEYCLOAK_DATABASE}
      - KC_DB_URL_HOST=${KEYCLOAK_DATABASE}
      - KC_DB_USERNAME=${KEYCLOAK_DATABASE_USERNAME}
      - KC_DB_PASSWORD=${KEYCLOAK_DATABASE_PASSWORD}
      - KC_DB_URL=${KEYCLOAK_DATABASE_URL}
      - KC_PROXY=edge
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    image: ${COMPOSE_PROJECT_NAME}_keycloak_${KEYCLOAK_VERSION}
    ports:
      - ${KEYCLOAK_PORT}:${KEYCLOAK_PORT}
    networks:
      - nw
    tty: true

  dex:
    build:
      context: ./dex
      args:
        - DEX_VERSION=${DEX_VERSION}
        - DEX_PORT=${DEX_PORT}
    image: ${COMPOSE_PROJECT_NAME}_dex_${DEX_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_dex_${KEYCLOAK_VERSION}
    environment:
      - DEX_ISSUER=${DEX_ISSUER}
      - DEX_POSTGRES_HOST=${DEX_POSTGRES_HOST}
      - DEX_POSTGRES_DB=${DEX_POSTGRES_DB}
      - DEX_POSTGRES_USER=${DEX_POSTGRES_USER}
      - DEX_POSTGRES_PASSWORD=${DEX_POSTGRES_PASSWORD}
      - DEX_EXPIRY_DEVICE_REQUESTS=${DEX_EXPIRY_DEVICE_REQUESTS}
      - DEX_EXPIRY_SIGNING_KEYS=${DEX_EXPIRY_SIGNING_KEYS}
      - DEX_EXPIRY_ID_TOKENS=${DEX_EXPIRY_ID_TOKENS}
      - DEX_EXPIRY_AUTH_REQUESTS=${DEX_EXPIRY_AUTH_REQUESTS}
      - DEX_OAUTH2_RESPONSE_TYPES=${DEX_OAUTH2_RESPONSE_TYPES}
      - DEX_OAUTH2_SKIP_APPROVAL_SCREEN=${DEX_OAUTH2_SKIP_APPROVAL_SCREEN}
      - DEX_OAUTH2_ALWAYS_SHOW_LOGIN_SCREEN=${DEX_OAUTH2_ALWAYS_SHOW_LOGIN_SCREEN}
      - DEX_GRPC_ADDR=${DEX_GRPC_ADDR}
    volumes:
      - ./dex/config.docker.yaml:/etc/dex/config.docker.yaml
    ports:
      - "${DEX_PORT}:${DEX_PORT}"
    networks:
      - nw
    tty: true
